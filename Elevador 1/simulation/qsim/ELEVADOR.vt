// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2022 23:24:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ELEVADOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ELEVADOR_vlg_sample_tst(
	EQ,
	GT,
	LT,
	ST,
	sampler_tx
);
input  EQ;
input  GT;
input  LT;
input [2:0] ST;
output sampler_tx;

reg sample;
time current_time;
always @(EQ or GT or LT or ST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ELEVADOR_vlg_check_tst (
	NS,
	openDoor,
	statusElev,
	sampler_rx
);
input [2:0] NS;
input  openDoor;
input [1:0] statusElev;
input sampler_rx;

reg [2:0] NS_expected;
reg  openDoor_expected;
reg [1:0] statusElev_expected;

reg [2:0] NS_prev;
reg  openDoor_prev;
reg [1:0] statusElev_prev;

reg [2:0] NS_expected_prev;
reg  openDoor_expected_prev;
reg [1:0] statusElev_expected_prev;

reg [2:0] last_NS_exp;
reg  last_openDoor_exp;
reg [1:0] last_statusElev_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	NS_prev = NS;
	openDoor_prev = openDoor;
	statusElev_prev = statusElev;
end

// update expected /o prevs

always @(trigger)
begin
	NS_expected_prev = NS_expected;
	openDoor_expected_prev = openDoor_expected;
	statusElev_expected_prev = statusElev_expected;
end



// expected openDoor
initial
begin
	openDoor_expected = 1'bX;
end 
// expected NS[ 2 ]
initial
begin
	NS_expected[2] = 1'bX;
end 
// expected NS[ 1 ]
initial
begin
	NS_expected[1] = 1'bX;
end 
// expected NS[ 0 ]
initial
begin
	NS_expected[0] = 1'bX;
end 
// expected statusElev[ 1 ]
initial
begin
	statusElev_expected[1] = 1'bX;
end 
// expected statusElev[ 0 ]
initial
begin
	statusElev_expected[0] = 1'bX;
end 
// generate trigger
always @(NS_expected or NS or openDoor_expected or openDoor or statusElev_expected or statusElev)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected NS = %b | expected openDoor = %b | expected statusElev = %b | ",NS_expected_prev,openDoor_expected_prev,statusElev_expected_prev);
	$display("| real NS = %b | real openDoor = %b | real statusElev = %b | ",NS_prev,openDoor_prev,statusElev_prev);
`endif
	if (
		( NS_expected_prev[0] !== 1'bx ) && ( NS_prev[0] !== NS_expected_prev[0] )
		&& ((NS_expected_prev[0] !== last_NS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NS_expected_prev);
		$display ("     Real value = %b", NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NS_exp[0] = NS_expected_prev[0];
	end
	if (
		( NS_expected_prev[1] !== 1'bx ) && ( NS_prev[1] !== NS_expected_prev[1] )
		&& ((NS_expected_prev[1] !== last_NS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NS_expected_prev);
		$display ("     Real value = %b", NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NS_exp[1] = NS_expected_prev[1];
	end
	if (
		( NS_expected_prev[2] !== 1'bx ) && ( NS_prev[2] !== NS_expected_prev[2] )
		&& ((NS_expected_prev[2] !== last_NS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NS_expected_prev);
		$display ("     Real value = %b", NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NS_exp[2] = NS_expected_prev[2];
	end
	if (
		( openDoor_expected_prev !== 1'bx ) && ( openDoor_prev !== openDoor_expected_prev )
		&& ((openDoor_expected_prev !== last_openDoor_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port openDoor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", openDoor_expected_prev);
		$display ("     Real value = %b", openDoor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_openDoor_exp = openDoor_expected_prev;
	end
	if (
		( statusElev_expected_prev[0] !== 1'bx ) && ( statusElev_prev[0] !== statusElev_expected_prev[0] )
		&& ((statusElev_expected_prev[0] !== last_statusElev_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port statusElev[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", statusElev_expected_prev);
		$display ("     Real value = %b", statusElev_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_statusElev_exp[0] = statusElev_expected_prev[0];
	end
	if (
		( statusElev_expected_prev[1] !== 1'bx ) && ( statusElev_prev[1] !== statusElev_expected_prev[1] )
		&& ((statusElev_expected_prev[1] !== last_statusElev_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port statusElev[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", statusElev_expected_prev);
		$display ("     Real value = %b", statusElev_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_statusElev_exp[1] = statusElev_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ELEVADOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EQ;
reg GT;
reg LT;
reg [2:0] ST;
// wires                                               
wire [2:0] NS;
wire openDoor;
wire [1:0] statusElev;

wire sampler;                             

// assign statements (if any)                          
ELEVADOR i1 (
// port map - connection between master ports and signals/registers   
	.EQ(EQ),
	.GT(GT),
	.LT(LT),
	.NS(NS),
	.openDoor(openDoor),
	.ST(ST),
	.statusElev(statusElev)
);
// ST[ 2 ]
always
begin
	ST[2] = 1'b0;
	ST[2] = #28000 1'b1;
	#12000;
end 
// ST[ 1 ]
initial
begin
	repeat(16)
	begin
		ST[1] = 1'b0;
		ST[1] = #30000 1'b1;
		# 30000;
	end
	ST[1] = 1'b0;
	ST[1] = #30000 1'b1;
end 
// ST[ 0 ]
always
begin
	ST[0] = 1'b0;
	ST[0] = #30000 1'b1;
	#20000;
end 

// EQ
initial
begin
	EQ = 1'b0;
	EQ = #5000 1'b1;
	# 45000;
	repeat(3)
	begin
		EQ = 1'b0;
		EQ = #255000 1'b1;
		# 45000;
	end
	EQ = 1'b0;
end 

// GT
initial
begin
	GT = 1'b0;
	GT = #60000 1'b1;
	# 90000;
	repeat(2)
	begin
		GT = 1'b0;
		GT = #210000 1'b1;
		# 90000;
	end
	GT = 1'b0;
	GT = #210000 1'b1;
end 

// LT
initial
begin
	repeat(3)
	begin
		LT = 1'b0;
		LT = #210000 1'b1;
		# 90000;
	end
	LT = 1'b0;
end 

ELEVADOR_vlg_sample_tst tb_sample (
	.EQ(EQ),
	.GT(GT),
	.LT(LT),
	.ST(ST),
	.sampler_tx(sampler)
);

ELEVADOR_vlg_check_tst tb_out(
	.NS(NS),
	.openDoor(openDoor),
	.statusElev(statusElev),
	.sampler_rx(sampler)
);
endmodule

